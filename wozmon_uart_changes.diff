--- programs/wozmon.asm	2025-09-24 17:18:55.611845026 -0500
+++ programs/wozmon_uart.asm	2025-09-29 02:24:56.046288955 -0500
@@ -1,8 +1,8 @@
 ;  The WOZ Monitor for the Apple 1
 ;  Written by Steve Wozniak in 1976
+;  Adapted for UART by Andrew S. Erwin
+;  Inspired by Ben Eater's 6502 breadboard computer
-
-; Page 0 Variables
+; Page 0 Variables (UNCHANGED from original)
 
 XAML            = $24           ;  Last "opened" location Low
 XAMH            = $25           ;  Last "opened" location High
@@ -13,44 +13,84 @@
 YSAV            = $2A           ;  Used to see if hex value is given
 MODE            = $2B           ;  $00=XAM, $7F=STOR, $AE=BLOCK XAM
 
-
-; Other Variables
-
+; Input buffer (UNCHANGED from original)
 IN              = $0200         ;  Input buffer to $027F
-KBD             = $D010         ;  PIA.A keyboard input
-KBDCR           = $D011         ;  PIA.A keyboard control register
-DSP             = $D012         ;  PIA.B display output register
-DSPCR           = $D013         ;  PIA.B display control register
 
-               .org $FF00
-               .export RESET
+; Hardware addresses - CHANGED from Apple 1 PIA to W65C51N UART
+; Original Apple 1 hardware:
+;KBD             = $D010         ;  PIA.A keyboard input
+;KBDCR           = $D011         ;  PIA.A keyboard control register
+;DSP             = $D012         ;  PIA.B display output register
+;DSPCR           = $D013         ;  PIA.B display control register
+
+; NEW: W65C51N UART registers for our system
+UART_DATA       = $FE00         ; Data register (R/W)
+UART_STATUS     = $FE01         ; Status register (Read only)
+UART_COMMAND    = $FE02         ; Command register (Write only)
+UART_CONTROL    = $FE03         ; Control register (Write only)
+
+; NEW: UART Status bits
+RX_READY        = $08           ; Receiver data ready
+TX_EMPTY        = $10           ; Transmitter data register empty
+
+; CHANGED: Load address from $FF00 to $7E00 for RAM loading
+                .org $7E00
+; REMOVED: .export RESET (not needed for user program)
 
 RESET:          CLD             ; Clear decimal arithmetic mode.
                 CLI
-                LDY #$7F        ; Mask for DSP data direction register.
-                STY DSP         ; Set it up.
-                LDA #$A7        ; KBD and DSP control register mask.
-                STA KBDCR       ; Enable interrupts, set CA1, CB1, for
-                STA DSPCR       ;  positive edge sense/output mode.
-NOTCR:          CMP #'_'+$80    ; "_"?
+
+; CHANGED: Replace Apple 1 PIA initialization with UART initialization
+; Original PIA setup:
+;                LDY #$7F        ; Mask for DSP data direction register.
+;                STY DSP         ; Set it up.
+;                LDA #$A7        ; KBD and DSP control register mask.
+;                STA KBDCR       ; Enable interrupts, set CA1, CB1, for
+;                STA DSPCR       ;  positive edge sense/output mode.
+
+; NEW: W65C51N UART initialization
+                LDA #$0B        ; Enable UART, no parity, no echo, no IRQ
+                STA UART_COMMAND
+                LDA #$1E        ; 9600 baud, 8 data bits, 1 stop bit
+                STA UART_CONTROL
+
+; CHANGED: Character comparisons - remove high bit ($80) used by Apple 1
+NOTCR:          CMP #'_'        ; "_"? (was #'_'+$80)
                 BEQ BACKSPACE   ; Yes.
-                CMP #$9B        ; ESC?
+                CMP #$1B        ; ESC? (was #$9B, now standard ASCII ESC)
                 BEQ ESCAPE      ; Yes.
                 INY             ; Advance text index.
                 BPL NEXTCHAR    ; Auto ESC if > 127.
-ESCAPE:         LDA #'\'+$80    ; "\".
+
+; CHANGED: Remove high bit from prompt character
+ESCAPE:         LDA #'\'        ; "\" (was #'\'+$80)
                 JSR ECHO        ; Output it.
-GETLINE:        LDA #$8D        ; CR.
+
+; CHANGED: Use standard ASCII CR instead of Apple 1's $8D
+GETLINE:        LDA #$0D        ; CR (was #$8D)
                 JSR ECHO        ; Output it.
                 LDY #$01        ; Initialize text index.
 BACKSPACE:      DEY             ; Back up text index.
                 BMI GETLINE     ; Beyond start of line, reinitialize.
-NEXTCHAR:       LDA KBDCR       ; Key ready?
-                BPL NEXTCHAR    ; Loop until ready.
-                LDA KBD         ; Load character. B7 should be ‘1’.
+
+; CHANGED: Replace Apple 1 keyboard input with UART input
+NEXTCHAR:
+; Original Apple 1 keyboard reading:
+;                LDA KBDCR       ; Key ready?
+;                BPL NEXTCHAR    ; Loop until ready.
+;                LDA KBD         ; Load character. B7 should be '1'.
+
+; NEW: UART input reading
+                LDA UART_STATUS ; Check UART status
+                AND #RX_READY   ; Receiver ready?
+                BEQ NEXTCHAR    ; Loop until ready
+                LDA UART_DATA   ; Load character (no high bit set)
+
                 STA IN,Y        ; Add to text buffer.
                 JSR ECHO        ; Display character.
-                CMP #$8D        ; CR?
+
+; CHANGED: Compare with standard ASCII CR
+                CMP #$0D        ; CR? (was #$8D)
                 BNE NOTCR       ; No.
                 LDY #$FF        ; Reset text index.
                 LDA #$00        ; For XAM mode.
@@ -59,20 +99,26 @@
 SETMODE:        STA MODE        ; $00=XAM, $7B=STOR, $AE=BLOCK XAM.
 BLSKIP:         INY             ; Advance text index.
 NEXTITEM:       LDA IN,Y        ; Get character.
-                CMP #$8D        ; CR?
+
+; CHANGED: Compare with standard ASCII CR
+                CMP #$0D        ; CR? (was #$8D)
                 BEQ GETLINE     ; Yes, done this line.
-                CMP #'.'+$80    ; "."?
+
+; CHANGED: Remove high bit from character comparisons
+                CMP #'.'        ; "."? (was #'.'+$80)
                 BCC BLSKIP      ; Skip delimiter.
                 BEQ SETMODE     ; Set BLOCK XAM mode.
-                CMP #':'+$80    ; ":"?
+                CMP #':'        ; ":"? (was #':'+$80)
                 BEQ SETSTOR     ; Yes. Set STOR mode.
-                CMP #'R'+$80    ; "R"?
+                CMP #'R'        ; "R"? (was #'R'+$80)
                 BEQ RUN         ; Yes. Run user program.
                 STX L           ; $00->L.
                 STX H           ;  and H.
                 STY YSAV        ; Save Y for comparison.
+
+; CHANGED: Hex parsing - use standard ASCII instead of Apple 1's high-bit encoding
 NEXTHEX:        LDA IN,Y        ; Get character for hex test.
-                EOR #$B0        ; Map digits to $0-9.
+                EOR #$30        ; Map digits to $0-9 (was #$B0 for high-bit chars)
                 CMP #$0A        ; Digit?
                 BCC DIG         ; Yes.
                 ADC #$88        ; Map letter "A"-"F" to $FA-FF.
@@ -85,7 +131,7 @@
                 LDX #$04        ; Shift count.
 HEXSHIFT:       ASL             ; Hex digit left, MSB to carry.
                 ROL L           ; Rotate into LSD.
-                ROL H           ; Rotate into MSD’s.
+                ROL H           ; Rotate into MSD's.
                 DEX             ; Done 4 shifts?
                 BNE HEXSHIFT    ; No, loop.
                 INY             ; Advance text index.
@@ -94,43 +140,49 @@
                 BEQ ESCAPE      ; Yes, generate ESC sequence.
                 BIT MODE        ; Test MODE byte.
                 BVC NOTSTOR     ; B6=0 STOR, 1 for XAM and BLOCK XAM
-                LDA L           ; LSD’s of hex data.
-                STA (STL,X)     ; Store at current ‘store index’.
+                LDA L           ; LSD's of hex data.
+                STA (STL,X)     ; Store at current 'store index'.
                 INC STL         ; Increment store index.
                 BNE NEXTITEM    ; Get next item. (no carry).
-                INC STH         ; Add carry to ‘store index’ high order.
+                INC STH         ; Add carry to 'store index' high order.
 TONEXTITEM:     JMP NEXTITEM    ; Get next command item.
 RUN:            JMP (XAML)      ; Run at current XAM index.
 NOTSTOR:        BMI XAMNEXT     ; B7=0 for XAM, 1 for BLOCK XAM.
                 LDX #$02        ; Byte count.
 SETADR:         LDA L-1,X       ; Copy hex data to
-                STA STL-1,X     ;  ‘store index’.
-                STA XAML-1,X    ; And to ‘XAM index’.
+                STA STL-1,X     ;  'store index'.
+                STA XAML-1,X    ; And to 'XAM index'.
                 DEX             ; Next of 2 bytes.
                 BNE SETADR      ; Loop unless X=0.
 NXTPRNT:        BNE PRDATA      ; NE means no address to print.
-                LDA #$8D        ; CR.
+
+; CHANGED: Use standard ASCII CR
+                LDA #$0D        ; CR (was #$8D)
                 JSR ECHO        ; Output it.
-                LDA XAMH        ; ‘Examine index’ high-order byte.
+                LDA XAMH        ; 'Examine index' high-order byte.
                 JSR PRBYTE      ; Output it in hex format.
-                LDA XAML        ; Low-order ‘examine index’ byte.
+                LDA XAML        ; Low-order 'examine index' byte.
                 JSR PRBYTE      ; Output it in hex format.
-                LDA #':'+$80    ; ":".
+
+; CHANGED: Remove high bit from colon
+                LDA #':'        ; ":" (was #':'+$80)
                 JSR ECHO        ; Output it.
-PRDATA:         LDA #$A0        ; Blank.
+
+; CHANGED: Use standard ASCII space
+PRDATA:         LDA #$20        ; Space (was #$A0)
                 JSR ECHO        ; Output it.
-                LDA (XAML,X)    ; Get data byte at ‘examine index’.
+                LDA (XAML,X)    ; Get data byte at 'examine index'.
                 JSR PRBYTE      ; Output it in hex format.
 XAMNEXT:        STX MODE        ; 0->MODE (XAM mode).
                 LDA XAML
-                CMP L           ; Compare ‘examine index’ to hex data.
+                CMP L           ; Compare 'examine index' to hex data.
                 LDA XAMH
                 SBC H
                 BCS TONEXTITEM  ; Not less, so no more data to output.
                 INC XAML
-                BNE MOD8CHK     ; Increment ‘examine index’.
+                BNE MOD8CHK     ; Increment 'examine index'.
                 INC XAMH
-MOD8CHK:        LDA XAML        ; Check low-order ‘examine index’ byte
+MOD8CHK:        LDA XAML        ; Check low-order 'examine index' byte
                 AND #$07        ;  For MOD 8=0
                 BPL NXTPRNT     ; Always taken.
 PRBYTE:         PHA             ; Save A for LSD.
@@ -140,21 +192,35 @@
                 LSR
                 JSR PRHEX       ; Output hex digit.
                 PLA             ; Restore A.
+
+; CHANGED: Remove high bit from ASCII '0'
 PRHEX:          AND #$0F        ; Mask LSD for hex print.
-                ORA #'0'+$80    ; Add "0".
-                CMP #$BA        ; Digit?
+                ORA #'0'        ; Add "0" (was #'0'+$80)
+                CMP #$3A        ; Digit? (was #$BA)
                 BCC ECHO        ; Yes, output it.
                 ADC #$06        ; Add offset for letter.
-ECHO:           BIT DSP         ; DA bit (B7) cleared yet?
-                BMI ECHO        ; No, wait for display.
-                STA DSP         ; Output character. Sets DA.
-                RTS             ; Return.
 
-                BRK             ; unused
-                BRK             ; unused
-
-; Interrupt Vectors
+; CHANGED: Replace Apple 1 display output with UART output
+ECHO:
+; Original Apple 1 display:
+;                BIT DSP         ; DA bit (B7) cleared yet?
+;                BMI ECHO        ; No, wait for display.
+;                STA DSP         ; Output character. Sets DA.
+
+; NEW: UART output with transmitter ready check
+                PHA             ; Save character
+ECHO_WAIT:      LDA UART_STATUS ; Check UART status
+                AND #TX_EMPTY   ; Transmitter ready?
+                BEQ ECHO_WAIT   ; No, wait
+                PLA             ; Restore character
+                STA UART_DATA   ; Output character
+                RTS             ; Return.
 
-                .WORD $0F00     ; NMI
-                .WORD RESET     ; RESET
-                .WORD $0000     ; BRK/IRQ
+; REMOVED: Original interrupt vectors (handled by BIOS in our system)
+;                BRK             ; unused
+;                BRK             ; unused
+;
+;; Interrupt Vectors
+;                .WORD $0F00     ; NMI
+;                .WORD RESET     ; RESET
+;                .WORD $0000     ; BRK/IRQ
\ No newline at end of file
